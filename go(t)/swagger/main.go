package main

import (
	"net/http"

	"github.com/gin-gonic/gin"

	_ "swagger/docs" // docs is generated by Swag CLI

	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

// User represents a user in the system
type User struct {
	ID    int    `json:"id" example:"1"`
	Name  string `json:"name" example:"John Doe"`
	Email string `json:"email" example:"john@example.com"`
}

// ErrorResponse represents error output
type ErrorResponse struct {
	Code    int    `json:"code" example:"400"`
	Message string `json:"message" example:"invalid request"`
}

var users = []User{
	{ID: 1, Name: "Alice", Email: "alice@example.com"},
	{ID: 2, Name: "Bob", Email: "bob@example.com"},
}

// @title           Users API
// @version         1.0
// @description     This is a sample Users API using Gin + Swagger
// @host      localhost:8080
// @BasePath  /api/v1
func main() {
	r := gin.Default()

	v1 := r.Group("/api/v1")
	{
		v1.GET("/users/:id", GetUser)
		v1.POST("/users", CreateUser)
	}

	// Swagger endpoint
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	
	r.Run(":8080")
}


// GetUser godoc
// @Summary      Get al users
// @Description  Returns a list of users
// @Tags         users
// @Accept       json
// @Produce      json
// @Success      200  {array}  User
// @Failure      400  {object}  ErrorResponse
// @Failure      404  {object}  ErrorResponse
// @Router       /users [get]
func GetAll(ctx *gin.Context)  {
	ctx.IndentedJSON(200,users)
}


// GetUser godoc
// @Summary      Get user by ID
// @Description  Returns a single user
// @Tags         users
// @Accept       json
// @Produce      json
// @Param        id   path      int  true  "User ID"
// @Success      200  {object}  User
// @Failure      400  {object}  ErrorResponse
// @Failure      404  {object}  ErrorResponse
// @Router       /users/{id} [get]
func GetUser(c *gin.Context) {
	id := c.Param("id")
	for _, user := range users {
		if string(rune(user.ID)) == id {
			c.JSON(http.StatusOK, user)
			return
		}
	}
	c.JSON(http.StatusNotFound, ErrorResponse{Code: 404, Message: "user not found"})
}

// CreateUser godoc
// @Summary      Create a new user
// @Description  Add a new user to the list
// @Tags         users
// @Accept       json
// @Produce      json
// @Param        user  body      User  true  "User data"
// @Success      201   {object}  User
// @Failure      400   {object}  ErrorResponse
// @Router       /users [post]
func CreateUser(c *gin.Context) {
	var newUser User
	if err := c.ShouldBindJSON(&newUser); err != nil {
		c.JSON(http.StatusBadRequest, ErrorResponse{Code: 400, Message: "invalid input"})
		return
	}
	newUser.ID = len(users) + 1
	users = append(users, newUser)
	c.JSON(http.StatusCreated, newUser)
}
